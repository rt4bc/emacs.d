#+title: Emacs From Scratch Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Every Beginning
Learn emacs configuration and itself(emacs-lisp) from System
Crafters [[https://github.com/daviwil/emacs-from-scratch][Emacs-From-Scratch]], copy and remember, happy hacking.

#+begin_quote
In order to optimise command lookup, bash keeps a cache, per bash process, of where it found files. So if you typed python and it found it in /usr/bin/, then changing the PATH to provide another python earlier in the PATH will have no effect. You need to also give the bash command:

hash -r
to forget the optimised cached. See help hash. (Of course, I assume you reread the .bashrc or set the PATH explicitly in your shell as well).
#+end_quote

* Startup Performance
** Yes-or-No -> Y-or-N
#+begin_src emacs-lisp
  ;;; init.el --- Generated by Emacs.org
  ;;; Commentary:
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  (setq inhibit-startup-message t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Measure Loading Time Performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_Src
* Package System Setup
Emacs has a built in package manager but it doesn’t make it easy to
automatically install packages on a new system the first time you pull
down your configuration. use-package is a really helpful package used
in this configuration to make it a lot easier to automate the
installation and configuration of everything else we use.

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

The auto-package-update package helps us keep our Emacs packages up to
date! It will prompt you after a certain number of days either at
startup or at a specific time of day to remind you to update your
packages.

You can also use M-x auto-package-update-now to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 30) ;; interval days 
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe) ;; update installed pacakge if at least xx days have pased since last update
    (auto-package-update-at-time "09:00"))
#+end_src

Read PATH from shell
#+begin_src emacs-lisp
  ;; (when (memq window-system '(mac ns x))
  ;;  (exec-path-from-shell-initialize))
  (use-package exec-path-from-shell
    :config
    (if (eq system-type 'darwin)
        (exec-path-from-shell-initialize)))
#+end_src

** Enable SSH connections ove HTTPS
To set this in your ssh config, edit the file at ~/.ssh/config, add configuration as below, for company's firewall issue
#+begin_src shell
Host github.com
Hostname ssh.github.com
Port 443
User git
#+end_src

** Better User Experience
In Windows, Like Cadence will use HOME directory, so this not friendly to emacs, so need to customerize the HOEM direcotry
when emacs startup.
1. Try to find load-path by emacs command. C-h v load-path
   check the load-path variable
2. Then add a site-start.el file with this content.
   #+begin_quote
;;(setq user-init-file "C:/path/to/.emacs")
;;(setq user-emacs-directory "C:/path/to/.emacs.d/")
;;(setq default-directory "C:/whatever/you/want/to/start/in")
;;(setenv "HOME" "D:/my/home/directory")
;;(load user-init-file)

(setenv "HOME" "E:/Dotfiles")
(setq default-directory "E:/ESP32-Projects")
   #+end_quote
   
* Working with Coding Systems and Unicode
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

* Keep Folders Clean
We use the no-littering package to keep folders where we edit files
and the Emacs configuration folder clean! It knows about a wide
variety of variables for built in Emacs features as well as those from
community packages so it can be much easier than finding and setting
these variables yourself.

#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

    ;; Emacs will save customizations into your init.el file by default. If you don't
    ;; want that, you might want to store them in a sibling file or even in the etc/
    ;; directory:

    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  )
#+end_src

* General Configuration
Auto Wrap lines
#+begin_src emacs-lisp
  (global-visual-line-mode 1)  
#+end_src

Key binding
This settin works for GUI Emacs
#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
#+end_src
For Emacs in terminal, like iterm2, need to change profile->keys bindings

Kill ring lines
#+begin_src emacs-lisp
  (setq  global-mark-ring-max 5000 ;;increase mark ring to contains 5000 entries
         mark-ring-max 5000 ;;increase kill ring to contains 5000 entries
         mode-require-final-newline t ;;add a newline to end of file
         )
  ;;increase kill-ring capacity
  (setq kill-ring-max 5000 )
#+end_src

New line indent
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (global-set-key (kbd "RET") 'newline-and-indent)

  ;; Hight lighting Indentation
  (use-package highlight-indentation
    :config
    (set-face-background 'highlight-indentation-face "#e3e3d3")
    (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")
    (add-hook 'python-mode-hook 'highlight-indentation-mode)
    )

  ;; (use-package aggressive-indent
  ;; :config
  ;; (global-aggressive-indent-mode 1))

#+end_src

Define words jump mode when brows docs
#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :bind ("C-." . ace-jump-mode))
#+end_src

ace-window
#+begin_src emacs-lisp
  (use-package ace-window
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src
* Evil Mode
** TODO 

* ESL Spell check
Need to install spell checker and dictionary
aspell & aspell-dict-en
#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

* Basic UI Configuration

** Bar Mode and Transparency
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (progn
        (scroll-bar-mode -1)        ; Disable visible scrollbar
        (tool-bar-mode -1)          ; Disable the toolbar
        (tooltip-mode -1)           ; Disable tooltips
        (set-fringe-mode 10)        ; Give some breathing room
        (menu-bar-mode -1)            ; Disable the menu bar
        ))

  ;; Set up the visible bell
  (setq visible-bell t)
  (display-time-mode 1)
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparenc
  (defvar efs/frame-transparency '(90 . 90))
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Font Configuration
Use Fira code and Cantarell
#+begin_src emacs-lisp
  ;; For mainly ascii characters inputs&writing, no need.
  ;; (use-package unicode-fonts              
  ;; :config
  ;; (unicode-fonts-setup))

  (defvar efs/default-font-size 150)
  (defvar efs/default-variable-font-size 150)
  (if (display-graphic-p)
      (progn
        (set-face-attribute 'default nil :font "JetBrains Mono" :height efs/default-font-size)
        ;; Set the fixed pitch face
        (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height efs/default-font-size)
        ;; Set the variable pitch face
        (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)))
#+end_src

** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t)
  (use-package solarized-theme
    :ensure t)
  (if (display-graphic-p)
      (load-theme 'solarized-zenburn t)
    (load-theme 'doom-gruvbox t))
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp
  ;; doom-modeline depend the all-the-icons package 
  ;; (use-package all-the-icons)
  ;; (use-package doom-modeline
  ;; :init (doom-modeline-mode 1)
  ;; :custom ((doom-modeline-height 15)))
#+end_src

** Key Remapping
The advantage of creating the Super and Hyper in emacs is that you can have more hotkeys, and no major or minor modes will stamp on your keys.
super key should be ok now, for wsl2 environment.
The emacs org mode, S key is shift key!!!

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))
#+end_src

** Show parens
#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src
** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp
  (use-package ivy
    :bind (
           ("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    (setq ivy-initial-inputs-alist nil)

    ;; Use different regex strategies per completion command
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)

    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-format-function #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          (plist-put ivy-rich-display-transformers-list
                     'ivy-switch-buffer
                     '(:columns
                       ((ivy-rich-candidate (:width 40))
                        (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                        (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                        (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                        (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                       :predicate
                       (lambda (cand)
                         (if-let ((buffer (get-buffer cand)))
                             ;; Don't mess with EXWM buffers
                             (with-current-buffer buffer
                               (not (derived-mode-p 'exwm-mode)))))))))

  (use-package ivy-hydra
    :after ivy)

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-M-j" . 'counsel-switch-buffer)
           ("C-x C-b" . counsel-ibuffer)
           ("M-y" . counsel-yank-pop)
           ("C-x C-r" . counsel-recentf)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

** Improved Candidate Sorting
prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them.  This
can be especially helpful when using =M-x= to run commands that you
don't have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
    :after counsel)
#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs'
=describe-= command buffers.  For example, if you use
=describe-function=, you will not only get the documentation about the
function, you will also see the source code of the function and where
it gets used in other places in the Emacs configuration.  It is very
useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Programming Config
** Emacs Tree Sitter
#+begin_src emacs-lisp

  (use-package tree-sitter
    :ensure t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
    )

  (use-package tree-sitter-langs
    :ensure t
    )

#+end_src
** File Explorer sidebar
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'ace-window)
    ;; (define-key ace-window-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 1
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-expand-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         nil
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-read-string-input             'from-child-frame
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            ;; treemacs-litter-directories            '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             nil
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         25
            treemacs-width-is-initially-locked     t
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :after (treemacs dired)
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

** Code template
#+begin_src emacs-lisp
  (use-package yasnippet                  
    :config
    (add-hook 'prog-mode-hook #'yas-minor-mode))

  (use-package yasnippet-snippets
    :ensure t)
#+end_src

** Code Folding
Enable Hs-minor-mode globally
#+begin_src emacs-lisp
  (defun my-hs-mode-hook ()
    (hs-minor-mode)
    ;; (local-set-key (kbd "C-=") 'hs-show-block) 
    ;; (local-set-key (kbd "C-+") 'hs-hide-block)
    )
  (add-hook 'prog-mode-hook 'my-hs-mode-hook)
#+end_src

** Company Mode
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).
#+begin_src emacs-lisp
  (use-package company
    :ensure t)
  (global-company-mode)
  (global-set-key (kbd "TAB") #'company-indent-or-complete-common)
#+end_src
** LSP Mode Setting
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :config
    (defun eglot-format-buffer-on-save()
      (if (and (project-current) (eglot-managed-p))
          (add-hook 'before-save-hook  #'eglot-format-buffer nil 'local)
        (remove-hook 'before-save-hook #'eglot-format-buffer 'local)))
    ;; (add-hook 'eglot-managed-mode-hook #'eglot-format-buffer-on-save)
    )

  (require 'eglot)
  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))

  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           ;; (XXX-mode . lsp)
           ;; (python-mode . lsp)
           (lua-mode . lsp)
           ;; install lua-lanuage-server first
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;; optional if you want which-key integration
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  (use-package which-key
    :config
    (which-key-mode))
#+end_src
** Common Lisp Setting
1. Install SBCL
   For Arch:
   #+begin_src shell
     $pacman -S sbcl
     $curl -O http://beta.quicklisp.org/quicklisp.lisp
     $sbcl --load quicklisp.lisp
   #+end_src
   
2. Config
#+begin_src emacs-lisp
  ;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; Replace "sbcl" with the path to your implementation
  ;; (setq inferior-lisp-program "/usr/sbin/sbcl")
  (use-package sly
    :config
    (setq inferior-lisp-program "/usr/bin/sbcl"
          sly-complete-symbol-function 'sly-simple-completions))
#+end_src
** C/C++ Setting
#+begin_src emacs-lisp
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
#+end_src

** Python Setting
*** How to setting Env
+ install virtualenv by pip
  #+begin_src shell
    pip3 install virtualenv
    pip3 install virtualenvwrapper
  #+end_src
  after install python package, add virtualenvwrapper.sh path  to $PATH
  or source virtualenvwrapper.sh first, make makevirtualenv workon ... command available
  #+begin_src shell
    ❯ mkvirtualenv py39
  #+end_src

+ virtualevn set, put setting in .zshrc file
  #+begin_src shell
    #Virtualenvwrapper settings:
    export WORKON_HOME=$HOME/.virtualenvs
    export VIRTUALENVWRAPPER_PYTHON=$HOME/.virtualenvs/py39/bin/python3
    export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.virtualenvs/py39/bin/virtualenv
    source $HOME/.virtualenvs/py39/bin/activate 
  #+end_src

  #+begin_src shell
    #Run:
    $workon
    #A list of environments, empty, is printed.
  #+end_src
  
*** How to set LSP
+ install Python language server, python-language-server is outdated...
  #+begin_src shell
    pip3 install 'python-lsp-server[all]'
    pip3 install pyls-mypy pyls-isort pyls-black
  #+end_src

   #+begin_src emacs-lisp
     (use-package elpy
       :init
       (elpy-enable)
       :config
       (setq elpy-rpc-virtualenv-path 'current)
       (setq elpy-formatter 'black)
       ;; (setq elpy-syntax-check-command  "black")
       (setq elpy-rpc-backend "pyls")
       (add-hook 'elpy-mode-hook (lambda ()
                                   (add-hook 'before-save-hook
                                             'elpy-format-code nil t)))
       )

     ;; Pyls-mypy Mypy type checking for Python 3
     ;; pyls-isort Isort import sort code formatting
     ;; pyls-black for code formatting using Black
     ;; ;; M-x elpy-config can get the elpy environment config.
     ;; ;; an install the needed pacakge.


     ;; (use-package lsp-python-ms
     ;; :ensure t
     ;; :init (setq lsp-python-ms-auto-install-server t)
     ;; :hook (python-mode . (lambda ()
     ;; (require 'lsp-python-ms)
     ;; (lsp))))  ; or lsp-deferred

     (setq python-indent-guess-indent-offset-verbose nil)
     (setq python-shell-interpreter "python"
           ;; python-shell-interpreter-args "-i --simple-prompt")
           python-shell-interpreter-args "-i")

     ;; format code on save
     ;; (use-package python-black
     ;; :after python
     ;; :config
     ;; (add-hook 'python-mode-hook 'python-black-on-save-mode))
   #+end_src

   #+RESULTS:
** HDL Setting
#+begin_src emacs-lisp
  (use-package verilog-mode
    :config
    ;; User customization for Verilog mode
    (setq verilog-indent-level             3
          verilog-indent-level-module      3
          verilog-indent-level-declaration 3
          verilog-indent-level-behavioral  3
          verilog-indent-level-directive   1
          verilog-case-indent              2
          verilog-auto-newline             t
          verilog-auto-indent-on-newline   t
          verilog-tab-always-indent        t
          verilog-auto-endcomments         t
          verilog-minimum-comment-distance 40
          verilog-indent-begin-after-if    t
          verilog-auto-lineup              'declarations
          verilog-linter                   "verilator --lint-only"
          ))
#+end_src
** TAGS
#+begin_src emacs-lisp
  (use-package counsel-etags
    :bind (("C-]" . counsel-etags-find-tag-at-point))
    :init
    (add-hook 'prog-mode-hook
              (lambda ()
                (add-hook 'after-save-hook
                          'counsel-etags-virtual-update-tags 'append 'local)))
    :config
    (setq counsel-etags-update-interval 60)
    (push "build" counsel-etags-ignore-directories))

#+end_src
** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :init (global-flycheck-mode))
   #+end_src

** CMake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :config
    (setq auto-mode-alist  
          (append '(("CMakeLists\\.txt\\'" . cmake-mode)  
                    ("\\.cmake\\'" . cmake-mode))  
                  auto-mode-alist)))
#+end_src

** Magit
[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

   (use-package magit
     :commands magit-status
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

   ;; NOTE: Make sure to configure a GitHub token before using this package!
   ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
   ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
   (use-package forge
     :after magit)
  ;; Note: How to add private to ~/.ssh/config files
  ;; Host github.com-rt4bc
  ;; HostName github.com
  ;; User rt4bc
  ;; IdentityFile ~/.ssh/id_rsa_github_rt

  ;; Note update ssh keybindings
  ;; ssh-add -D ; remove all cache
  ;; ssh-add xxxx_private_key  ;;update host private key.
#+end_src

** Commenting
Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Writing
** Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich
document editor, project planner, task and time tracker, blogging
engine, and literate coding utility all wrapped up in one package.
*** Beter Font
The =efs/org-font-setup= function configures various text faces to
tweak the sizes of headings and use variable width fonts in most cases
so that it looks more like we're editing a document in =org-mode=.  We
switch back to fixed width (monospace) fonts for code blocks and
tables so that they display correctly.
#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inheit '(fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

*** Org Basic Config
This package provides visual alignment for Org Mode, Markdown and table.el tables on
GUI Emacs. It can properly align tables containing variable-pitch font, CJK characters
and images. Meanwhile, the text-based alignment generated by Org mode (or Markdown
mode) is left untouched.
#+begin_src emacs-lisp
  (use-package valign
    :ensure t
    :config
    (add-hook 'org-mode-hook #'valign-mode)
    (add-hook 'org-mode-hook
              (lambda()
                (setq truncate-lines nil))))
#+end_src

This section contains the basic configuration for =org-mode= plus the
configuration for Org agendas and capture templates.
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :ensure t
    :pin org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    )
#+end_src

*** Nice Heading Bullets
#+begin_src emacs-lisp

  (use-package org-bullets
    :ensure t
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("☯" "✿" "✚" "◉" "❀" )))

#+end_src

*** Config Babel Languages
Eval code blocks.
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (C . t)
       (lua . t)
       (python . t)))
    (push '("conf-unix" . conf-unix) org-src-lang-modes))
#+end_src

Code blocks syntax hightlight
#+begin_src  emacs-lisp
  (use-package htmlize)
#+end_src

*** Structurngle Templates
Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
  (with-eval-after-load 'org
    (cond
     ((string> org-version "9.")
      (progn
        (with-eval-after-load 'org
          ;; This is needed as of Org 9.x
          (require 'org-tempo)

          (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
          (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
          (add-to-list 'org-structure-template-alist '("py" . "src python"))
          )))))
#+end_src

*** Auto-tangle Configuration Files
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

*** Format Code Block
#+begin_src emacs-lisp
  (defun indent-org-block-automatically ()
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))
  (setq org-src-tab-acts-natively t)
  (add-hook 'org-babel-pre-tangle-hook 'indent-org-block-automatically)
  ;; (run-at-time 1 10 'indent-org-block-automatically)
#+end_src

*** Org Roam Mode
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org-brain/")
    :bind
    (("C-c n l" . org-roam-buffer-toggle)
     ("C-c n f" . org-roam-node-find)
     ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-setup))

#+end_src
** Latex Mode
#+begin_src emacs-lisp

#+end_src
* Ends
** Windows Startup Size
Put this part at the end of init file, for font size config has impact on this.
#+begin_src emacs-lisp
  (defun set-frame-size-according-to-resolution ()
    (interactive)
    (if window-system
        (progn
          ;; use 120 char wide window for largish displays
          ;; and smaller 80 column windows for smaller displays
          ;; pick whatever numbers make sense for you
          (if (> (x-display-pixel-width) 1500)
              (setq default-frame-alist
                    '((top . 0)(left . 0)
                      (width . 85)(height . 36)
                      ))
            (setq default-frame-alist
                  '((top . 0)(left . 0)
                    (width . 85)(height . 32)
                    )))
          ))
    )
  (set-frame-size-according-to-resolution)
#+end_src
** Disable line number hook for special major mode
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (provide 'init)
  ;;; init.el ends here
#+end_src
