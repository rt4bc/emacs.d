#+title: Emacs From Scratch Configuration
#+STARTUP: content
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Every Beginning
Learn emacs configuration and itself(emacs-lisp) from System Crafters
[[https://github.com/daviwil/emacs-from-scratch][Emacs-From-Scratch]], copy and remember, happy hacking.

* Startup Performance
** Yes-or-No -> Y-or-N
#+begin_src emacs-lisp
  ;;; init.el --- Generated by Emacs.org
  ;;; Commentary:
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  (setq inhibit-startup-message t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Measure Loading Time Performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 128 1000 1000))

  (defun my/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'my/display-startup-time)
#+end_Src

* Package System Setup
** Package Manager Source
Emacs has a built in package manager but it doesn’t make it easy to
automatically install packages on a new system the first time you pull
down your configuration. use-package is a really helpful package used
in this configuration to make it a lot easier to automate the
installation and configuration of everything else we use.

#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

** PATH from shell
A GNU Emacs library to ensure environment variables inside Emacs look
the same as in the user's shell.

This happens a lot on OS X, where an Emacs instance launched as a GUI
app inherits a default minimal set of environment variables that are
probably not the ones you see in a terminal window. Similarly, if you
start Emacs as a daemon from systemd or launchd, it will run with a
default set of environment variables.

*But* here may have protential issue, will be very slow
#+begin_src emacs-lisp
  (if (eq system-type 'darwin)
      (use-package exec-path-from-shell
	:config
	(exec-path-from-shell-initialize))
  )
#+end_src

In Windows, Like Cadence will use HOME directory, so this not friendly
to emacs, so need to customerize the HOEM direcotry when emacs starts.

1. Try to find load-path by emacs command. C-h v load-path check the load-path variable
2. Then add a site-start.el file with this content.
#+begin_verse
;;(setq user-init-file "C:/path/to/.emacs")
;;(setq user-emacs-directory "C:/path/to/.emacs.d/")
;;(setq default-directory "C:/whatever/you/want/to/start/in")
;;(setenv "HOME" "D:/my/home/directory")
;;(load user-init-file)
(setenv "HOME" "E:/Dotfiles")
(setq default-directory "E:/ESP32-Projects")
#+end_verse

** SSH Over Https
If ssh protocol is not available, then can use SSH over https configuration like below:
#+begin_example
Host github.com
Hostname ssh.github.com
Port 443
User git
#+end_example

* Working with Coding Systems and Unicode
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

* Keep Folders Clean
We use the no-littering package to keep folders where we edit files
and the Emacs configuration folder clean! It knows about a wide
variety of variables for built in Emacs features as well as those from
community packages so it can be much easier than finding and setting
these variables yourself.

#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
	  `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

    ;; Emacs will save customizations into your init.el file by default. If you don't
    ;; want that, you might want to store them in a sibling file or even in the etc/
    ;; directory:

    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  )
#+end_src

No Backup files
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

* General Configuration
** Auto Wrap lines
#+begin_src emacs-lisp
  (global-visual-line-mode 1)  
#+end_src

** Kill ring lines
#+begin_src emacs-lisp
  (setq  global-mark-ring-max 5000 ;;increase mark ring to contains 5000 entries
         mark-ring-max 5000 ;;increase kill ring to contains 5000 entries
         mode-require-final-newline t ;;add a newline to end of file
         )
  ;;increase kill-ring capacity
  (setq kill-ring-max 5000 )
#+end_src
** Switch Another Window
#+begin_src emacs-lisp
  (use-package ace-window
  :ensure t)
  (global-set-key (kbd "M-o") 'ace-window)
#+end_src
* UI Configuration
** Bar Mode and Transparency
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (progn
	(scroll-bar-mode -1)        ; Disable visible scrollbar
	(tool-bar-mode -1)          ; Disable the toolbar
	(tooltip-mode -1)           ; Disable tooltips
	(set-fringe-mode 10)        ; Give some breathing room
	(menu-bar-mode -1)            ; Disable the menu bar
	))

  ;; Set up the visible bell
  (setq visible-bell t)
  (display-time-mode 1)
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparenc
  (defvar my/frame-transparency '(95 . 95))
  (set-frame-parameter (selected-frame) 'alpha my/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,my/frame-transparency))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src

** Font Configuration
#+begin_src emacs-lisp
    ;; Get font from https://www.fontsquirrel.com/fonts
    (defvar my/default-font-size 160)
    (defvar my/default-variable-font-size 160)
    (if (display-graphic-p)
	(progn
	  ;; Set the fixed pitch face
	  (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height my/default-font-size)
	  (set-face-attribute 'default nil :font "JetBrains Mono" :height my/default-font-size)
	  (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height my/default-font-size :weight 'regular)
	  ))
    (use-package unicode-fonts
      :ensure t)
    (require 'unicode-fonts)
    (unicode-fonts-setup)
    (cond
     ((eq system-type 'darwin)
      (setq initial-frame-alist '((top . 10)
				  (left . 60)
				  (width . 85)
				  (height . 50))))
     (t
      (message "for other system")))
#+end_src

** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many
different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide
which one you like best.  You can also run =M-x counsel-load-theme= to choose
between them easily. 

#+begin_src emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t)
  (use-package zenburn-theme
    :ensure t)
  (use-package doom-themes
    :ensure t)
  (setq custom-safe-themes t)
  (if (display-graphic-p)
      ;; (color-theme-sanityinc-tomorrow-night)
      (load-theme #'doom-dracula)
    (load-theme #'zenburn))

  (use-package rainbow-mode
    :ensure t)
  (require 'rainbow-mode)
  (add-hook 'prog-mode-hook 'rainbow-mode)

  (global-hl-line-mode t)
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line
configuration for Emacs. The default configuration is quite good but you can
check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need
to run `M-x all-the-icons-install-fonts` so that mode line icons display
correctly. 

#+begin_src emacs-lisp
  ;; doom-modeline depend the all-the-icons package 
  (use-package all-the-icons    
    :ensure t
    :if (display-graphic-p))
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom
    ;; How tall the mode-line should be. It's only respected in GUI.
    ;; If the actual char height is larger, it respects the actual height.
    (setq doom-modeline-height 25)

    ;; How wide the mode-line bar should be. It's only respected in GUI.
    (setq doom-modeline-bar-width 4)

    ;; Whether to use hud instead of default bar. It's only respected in GUI.
    (setq doom-modeline-hud nil)
    )
#+end_src

** Ace Windows
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind ("M-o" . ace-window))
#+end_src

** Diff Highlight
#+begin_src emacs-lisp
  (use-package diff-hl
    :ensure t)
  (global-diff-hl-mode)
#+end_src
** Dimmer Mode
Dimmer mode will make inactive buffer dimmer.
#+begin_src emacs-lisp
  (use-package dimmer
    :ensure t)
  (require 'dimmer)
  (dimmer-configure-which-key)
  (dimmer-mode t)
#+end_src
** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing
any key binding in Emacs to offer you all possible completions for the
prefix.  For example, if you press =C-c= (hold control and press the
letter =c=), a panel will appear at the bottom of the frame displaying
all of the bindings under that prefix and which command they run.
This is very useful for learning the possible key bindings in the mode
of your current buffer.

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.2))
#+end_src

** Config & Show Parens
#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src

** Ivy and Counsel
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet
powerful selection menu that appears when you open files, switch buffers, and
for many other tasks in Emacs.  Counsel is a customized set of commands to
replace `find-file` with `counsel-find-file`, etc which provide useful commands
for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more
information about each item.

#+begin_src emacs-lisp
  (use-package ivy
    :bind (
	   ("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    (setq ivy-initial-inputs-alist nil)

    ;; Use different regex strategies per completion command
    ;; (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)

    (ivy-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-switch-buffer)
	   ("C-M-j" . 'counsel-switch-buffer)
	   ("C-x C-b" . counsel-ibuffer)
	   ("M-y" . counsel-yank-pop)
	   ("C-x C-r" . counsel-recentf)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history))
    ;;:custom
    ;;(counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

** Improved Candidate Sorting
Prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them.  This
can be especially helpful when using =M-x= to run commands that you
don't have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  (prescient-persist-mode 1)
  (ivy-prescient-mode 1))

(use-package smex ;; Adds M-x recent command sorting for counsel-M-x
  :after counsel)
#+end_src

** Comment Line
Commenting Emacs’ built in commenting functionality comment-dwim
(usually bound to M-;) doesn’t always comment things in the way you
might expect so we use evil-nerd-commenter to provide a more familiar
behavior. I’ve bound it to M-/ since other editors sometimes use this
binding but you could also replace Emacs’ M-; binding with this
command.

#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Company Mode
Company Mode provides a nicer in-buffer completion interface than
completion-at-point which is more reminiscent of what you would expect
from an IDE. We add a simple configuration to make the keybindings a
little more useful (TAB now completes the selection and initiates
completion at the current location if needed).
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :custom
    (global-company-mode 1)
    (global-set-key (kbd "TAB") #'company-indent-or-complete-common))
#+end_src

* Org Mode
Org Mode is one of the hallmark features of Emacs. It is a rich
document editor, project planner, task and time tracker, blogging
engine, and literate coding utility all wrapped up in one package.
** Org Mode Basic
This package provides visual alignment for Org Mode, Markdown and table.el
tables on GUI Emacs. It can properly align tables containing variable-pitch
font, CJK characters and images.  Meanwhile, the text-based alignment generated
by Org mode (or Markdown mode) is left untouched.
#+begin_src emacs-lisp
  ;; org mode configuration
  ;; custom general org-mode face and indent & headlinges
  (defun my/set-general-faces-org ()
    (setq line-spacing 0.1
	  org-pretty-entities t
	  org-startup-indented t
	  org-adapt-indentation nil)
    (variable-pitch-mode 1)
    (mapc
     (lambda (face) ;; Other fonts that require it are set to fixed-pitch.
       (set-face-attribute face nil :inherit 'fixed-pitch))
     (list 'org-block
	   'org-table
	   'org-verbatim
	   'org-block-begin-line
	   'org-block-end-line
	   'org-meta-line
	   'org-date
	   'org-drawer
	   'org-property-value
	   'org-special-keyword
	   'org-document-info-keyword))
    (mapc ;; This sets the fonts to a smaller size
     (lambda (face)
       (set-face-attribute face nil :height 0.8))
     (list 'org-document-info-keyword
	   'org-block-begin-line
	   'org-block-end-line
	   'org-meta-line
	   'org-drawer
	   'org-property-value
	   )))

  (defun my/set-specific-faces-org ()
    (set-face-attribute 'org-code nil
			:inherit '(shadow fixed-pitch))
    ;; Without indentation the headlines need to be different to be visible
    (set-face-attribute 'org-level-1 nil
			:height 1.20
			:foreground "#BEA4DB")
    (set-face-attribute 'org-level-2 nil
			:height 1.20
			:foreground "#A382FF"
			:slant 'italic)
    (set-face-attribute 'org-level-3 nil
			:height 1.10
			:foreground "#5E65CC")
    (set-face-attribute 'org-level-4 nil
			:height 1.10
			:foreground "#ABABFF"
			:slant 'italic)
    (set-face-attribute 'org-level-5 nil
			:height 1.05
			:foreground "#2843FB")
    (set-face-attribute 'org-date nil
			:foreground "#ECBE7B"
			:height 0.8)
    (set-face-attribute 'org-document-title nil
			:foreground "dark orange"
			:height 1.25)
    (set-face-attribute 'org-ellipsis nil
			:foreground "#4f747a" :underline nil)
    )

  (defun my/set-keyword-faces-org ()
      (mapc (lambda (pair) (push pair prettify-symbols-alist))
	  '(;; Syntax
	    ("TODO" .     "")
	    ("DONE" .     "")
	    ("WAITING" .  "")
	    ("HOLD" .     "")
	    ("NEXT" .     "")
	    ("CANCELLED" . "")
	    ("#+begin_quote" . "“")
	    ("#+end_quote" . "”")))
    (prettify-symbols-mode +1)
    (org-superstar-mode +1)
    )

  (defun my/style-org ()
    (my/set-general-faces-org)
    (my/set-specific-faces-org)
    (my/set-keyword-faces-org)
    )
  (add-hook 'org-mode-hook 'my/style-org)

  (setq org-hide-emphasis-makers t)

  (use-package org-bullets
     :ensure t
     :hook (org-mode . org-bullets-mode)
     :custom
     (org-bullets-bullet-list '("◉" "○" "▣" "▢")))

  (require 'org-tempo)
  ;; use this variable to disable acutal size
  ;; otherwise the #+ATTR_ORG or #+ATTR_HTML :width 300px will not work
  (setq org-image-actual-width nil)

  ;; align for east asia CJK languages
  (use-package valign
    :ensure t
    :config
    (add-hook 'org-mode-hook #'valign-mode)
    (add-hook 'org-mode-hook
	      (lambda()
		(setq truncate-lines nil))))
#+end_src

** Format Org File On Save
#+begin_src emacs-lisp
  (setq-default fill-column 80)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_src

* LSP
** Eglot
#+begin_src emacs-lisp
    (require 'eglot)
    (setq eldoc-echo-area-use-multiline-p nil)

    ;; Install directly from this repo via M-x package-vc-install (pasting in this URL), or using, e.g. straight. Then, in your init, simply
    ;; The emacs-lsp-booster project provides a rust-based wrapper program which substantially speeds up emacs' interactions with lsp servers. This small package enables eglot to use it.
    ;; Download the binary executable program form
    ;; https://github.com/blahgeek/emacs-lsp-booster  //system executable program, put it in $PATH
    ;; https://github.com/jdtsmith/eglot-booster
    ;; Install directly from this repo via M-x package-vc-install

  (use-package eglot-booster
    :after eglot
    :config (eglot-booster-mode))

  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    :hook ((prog-mode . corfu-mode))
    :init
    (global-corfu-mode))

  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Hook Python, C++, Rust
#+begin_src emacs-lisp
   ;; pip install pyright, and run pyright, then will have pyright-langserver
   ;; (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio")))
  (add-to-list 'eglot-server-programs '(python-mode . ("pylsp")))
  (add-hook 'python-mode-hook 'eglot-ensure)

  (cond
   ((eq system-type 'darwin)
    (add-to-list 'eglot-server-programs
		 '((c-mode c++-mode) . ("/opt/local/bin/clangd-mp-18" "--background-index"))))

   (t
    (add-to-list 'eglot-server-programs
		 '((c-mode c++-mode) . ("clangd" "--background-index")))))

  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)

  (use-package rust-mode
     :ensure t)
   (add-hook 'rust-mode-hook 'eglot-ensure)
#+end_src
