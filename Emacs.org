#+title: Emacs From Scratch Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Every Beginning
Learn emacs configuration and itself(emacs-lisp) from System Crafters
[[https://github.com/daviwil/emacs-from-scratch][Emacs-From-Scratch]], copy and remember, happy hacking.

* Startup Performance
** Yes-or-No -> Y-or-N
#+begin_src emacs-lisp
  ;;; init.el --- Generated by Emacs.org
  ;;; Commentary:
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  (setq inhibit-startup-message t)
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Measure Loading Time Performance
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun custom/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'custom/display-startup-time)
#+end_Src

* Package System Setup
use-package is a really helpful package used in this configuration to make it a
lot easier to automate the installation and configuration of everything.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+end_src

The auto-package-update package helps us keep our Emacs packages up to
date! It will prompt you after a certain number of days either at
startup or at a specific time of day to remind you to update your
packages.

You can also use M-x auto-package-update-now to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 100) ;; interval days 
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe) ;; update installed package if at least xx days have pased since last update
    (auto-package-update-at-time "09:00"))
#+end_src

Read PATH from shell
#+begin_src emacs-lisp
  ;; (when (memq window-system '(mac ns x))
  ;;  (exec-path-from-shell-initialize))
  (use-package exec-path-from-shell
    :config
    (if (eq system-type 'darwin)
        (exec-path-from-shell-initialize)))
#+end_src

** Enable SSH connections over HTTPS
To set this in your ssh config, edit the file at ~/.ssh/config, add
configuration as below, for company's firewall issue 
#+begin_src shell
Host github.com
Hostname ssh.github.com
Port 443
User git
#+end_src

** Better User Experience
In Windows, Like Cadence will use HOME directory, so this not friendly to emacs,
so need to customerize the HOEM direcotry when emacs startup.
1. Try to find load-path by emacs command. C-h v load-path
   check the load-path variable
2. Then add a site-start.el file with this content.
   #+begin_quote
   ;;(setq user-init-file "C:/path/to/.emacs")
   ;;(setq user-emacs-directory "C:/path/to/.emacs.d/")
   ;;(setq default-directory "C:/whatever/you/want/to/start/in")
   ;;(setenv "HOME" "D:/my/home/directory")
   ;;(load user-init-file)
   
   (setenv "HOME" "E:/Dotfiles")
   (setq default-directory "E:/ESP32-Projects")
   #+end_quote
   
* Working with Coding Systems and Unicode
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

* Keep Folders Clean
We use the no-littering package to keep folders where we edit files and the
Emacs configuration folder clean! It knows about a wide variety of variables for
built in Emacs features as well as those from community packages so it can be
much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (require 'recentf)
    (add-to-list 'recentf-exclude no-littering-var-directory)
    (add-to-list 'recentf-exclude no-littering-etc-directory)

    ;; no-littering doesn't set this by default so we must place
    ;; auto save files in the same path as it uses for sessions
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

    ;; Emacs will save customizations into your init.el file by default. If you don't
    ;; want that, you might want to store them in a sibling file or even in the etc/
    ;; directory:

    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  )
#+end_src

* General Configuration
** MacOS Key binding
This settin works for GUI Emacsï¼Œ For Emacs in terminal, like iterm2, need to
change profile->keys bindings.
#+begin_src emacs-lisp
  (setq mac-option-modifier 'meta)
#+end_src

** Kill ring lines
#+begin_src emacs-lisp
  (setq  global-mark-ring-max 5000 ;;increase mark ring to contains 5000 entries
         mark-ring-max 5000 ;;increase kill ring to contains 5000 entries
         mode-require-final-newline t ;;add a newline to end of file
         )
  ;;increase kill-ring capacity
  (setq kill-ring-max 5000 )
#+end_src

** New line indent
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(global-set-key (kbd "RET") 'newline-and-indent)

;; Hight lighting Indentation
(use-package highlight-indentation
  :config
  (set-face-background 'highlight-indentation-face "#e3e3d3")
  (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")
  (add-hook 'python-mode-hook 'highlight-indentation-mode)
  )
#+end_src

* ESL Spell check
Need to install spell checker and dictionary
aspell & aspell-dict-en
#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

* Basic UI Configuration
** Bar Mode
#+begin_src emacs-lisp
(if (display-graphic-p)
    (progn
      (scroll-bar-mode -1)        ; Disable visible scrollbar
      (tool-bar-mode -1)          ; Disable the toolbar
      (tooltip-mode -1)           ; Disable tooltips
      (set-fringe-mode 10)        ; Give some breathing room
      (menu-bar-mode -1)            ; Disable the menu bar
      ))

;; Set up the visible bell
(setq visible-bell t)
(display-time-mode 1)
(column-number-mode)
(global-display-line-numbers-mode t)
#+end_src

** Font Configuration
Use Fira code and Cantarell
#+begin_src emacs-lisp
;; For mainly ascii characters inputs&writing, no need.
;; (use-package unicode-fonts              
;; :config
;; (unicode-fonts-setup))

(defvar custom/default-font-size 150)
(defvar custom/default-variable-font-size 120)
(if (display-graphic-p)
    (progn
      (set-face-attribute 'default nil :font "JetBrains Mono" :height custom/default-font-size)
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height custom/default-font-size)
      ;; Set the variable pitch face
      ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)))
      ))
#+end_src

** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many
different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide
which one you like best.  You can also run =M-x counsel-load-theme= to choose
between them easily. 

#+begin_src emacs-lisp
  (use-package moe-theme
    :ensure t)
  (require 'moe-theme)

  ;; Show highlighted buffer-id as decoration. (Default: nil)
  (setq moe-theme-highlight-buffer-id t)

  ;; Resize titles (optional).
  (setq moe-theme-resize-markdown-title '(1.5 1.4 1.3 1.2 1.0 1.0))
  (setq moe-theme-resize-org-title '(1.5 1.4 1.3 1.2 1.1 1.0 1.0 1.0 1.0))
  (setq moe-theme-resize-rst-title '(1.5 1.4 1.3 1.2 1.1 1.0))

  ;; Choose a color for mode-line.(Default: blue)
  ;; (moe-theme-set-color 'cyan)
  (load-theme 'moe-dark t)
#+end_src

** Better Modeline
[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line
configuration for Emacs.  The default configuration is quite good but you can
check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

The first time you load your configuration on a new machine, you'll need
to run `M-x all-the-icons-install-fonts` so that mode line icons display
correctly.

#+begin_src emacs-lisp
  ;; doom-modeline depend the all-the-icons package 
  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** Key Remapping
The advantage of creating the Super and Hyper in emacs is that you can have more
hotkeys, and no major or minor modes will stamp on your keys. Super key should
be ok now, for wsl2 environment. The emacs org mode, S key is shift key!!!

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key
binding in Emacs to offer you all possible completions for the prefix.  For
example, if you press =C-c= (hold control and press the letter =c=), a panel
will appear at the bottom of the frame displaying all of the bindings under that
prefix and which command they run.  This is very useful for learning the
possible key bindings in the mode of your current buffer. 

#+begin_src emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.5))
#+end_src

** Show parens
#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src

** Ivy and Counsel
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet
powerful selection menu that appears when you open files, switch buffers, and
for many other tasks in Emacs.  Counsel is a customized set of commands to
replace `find-file` with `counsel-find-file`, etc which provide useful commands
for each of the default completion commands. 

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more
information about each item. 

#+begin_src emacs-lisp
(use-package ivy
  :bind (
         ("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)

  (setq ivy-initial-inputs-alist nil)

  ;; Use different regex strategies per completion command
  (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
  (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

  ;; Set minibuffer height for different commands
  (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)

  (ivy-mode 1))

(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1)
  :config
  (setq ivy-format-function #'ivy-format-function-line)
  (setq ivy-rich-display-transformers-list
        (plist-put ivy-rich-display-transformers-list
                   'ivy-switch-buffer
                   '(:columns
                     ((ivy-rich-candidate (:width 40))
                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                      (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                     :predicate
                     (lambda (cand)
                       (if-let ((buffer (get-buffer cand)))
                           ;; Don't mess with EXWM buffers
                           (with-current-buffer buffer
                             (not (derived-mode-p 'exwm-mode)))))))))

(use-package ivy-hydra
  :after ivy)

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-switch-buffer)
         ("C-M-j" . 'counsel-switch-buffer)
         ("C-x C-b" . counsel-ibuffer)
         ("M-y" . counsel-yank-pop)
         ("C-x C-r" . counsel-recentf)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+end_src

** Improved Candidate Sorting
prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them.  This
can be especially helpful when using =M-x= to run commands that you
don't have bound to a key but still need to access occasionally. 

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
    :after counsel)
#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs'
=describe-= command buffers.  For example, if you use
=describe-function=, you will not only get the documentation about the
function, you will also see the source code of the function and where
it gets used in other places in the Emacs configuration.  It is very
useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Programming Config
** LSP Config
Try to use lsp-bridge as the lsp client. Using Python multithreading techniques,
lsp-bridge builds a high-speed cache between Emacs and the LSP server, ensuring
that Emacs never gets stuck while providing a smooth and seamless code
completion experience.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode 1))

  ;; install depending package
  (use-package posframe
    :ensure t)
  (use-package markdown-mode
    :ensure t)
  ;; popup completion
  (unless (display-graphic-p)
    (add-to-list 'load-path "~/.emacs.d/custom-package/emacs-popon")
    (add-to-list 'load-path "~/.emacs.d/custom-package/acm-terminal")
    (with-eval-after-load 'acm
      (require 'acm-terminal)))


  (add-to-list 'load-path "~/.emacs.d/custom-package/lsp-bridge")
  (require 'lsp-bridge)
  (global-lsp-bridge-mode)
#+end_src

* Ends
** Disable line number hook for special major mode
#+begin_src emacs-lisp
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (provide 'init)
  ;;; init.el ends here
#+end_src
