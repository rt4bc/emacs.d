#+title: Emacs From Scratch Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Every Beginning
Learn emacs configuration and itself(emacs-lisp) from System Crafters
[[https://github.com/daviwil/emacs-from-scratch][Emacs-From-Scratch]], copy and remember, happy hacking.

* Startup Performance
** Yes-or-No -> Y-or-N
#+begin_src emacs-lisp
;; init.el --- Generated by Emacs.org
;; Commentary:
;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
;;       in Emacs and init.el will be generated automatically!
(setq inhibit-startup-message t)
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Measure Loading Time Performance
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun custom/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'custom/display-startup-time)
#+end_Src

* Package System Setup
use-package is a really helpful package used in this configuration to make it a
lot easier to automate the installation and configuration of everything.
#+begin_src emacs-lisp
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+end_src

Read PATH from shell, X Windows startup usually need this.
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :config
  (unless (eq window-system 'w32)
    (progn (exec-path-from-shell-initialize))))
#+end_src

** Enable SSH connections over HTTPS
To set this in your ssh config, edit the file at ~/.ssh/config, add
configuration as below, for company's firewall issue
#+begin_quote
Host github.com
Hostname ssh.github.com
Port 443
User git
#+end_quote

** Better User Experience
In Windows, Like Cadence will use HOME directory, so this not friendly to emacs,
so need to customerize the HOEM direcotry when emacs startup.

1. Try to find load-path by emacs command. C-h v load-path check the load-path
   variable
      
2. Then add a site-start.el file with this content.
#+begin_quote
;;(setq user-init-file "C:/path/to/.emacs")
;;(setq user-emacs-directory "C:/path/to/.emacs.d/")
;;(setq default-directory "C:/whatever/you/want/to/start/in")
;;(setenv "HOME" "D:/my/home/directory")
;;(load user-init-file)

(setenv "HOME" "x:/Dotfiles")
(setq default-directory "x:/xx")
#+end_quote
   
* Working with Coding Systems and UNICODE
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))

;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

* Keep Folders Clean
We use the no-littering package to keep folders where we edit files and the
Emacs configuration folder clean! It knows about a wide variety of variables for
built in Emacs features as well as those from community packages so it can be
much easier than finding and setting these variables yourself.

#+begin_src emacs-lisp
(use-package no-littering
  :config
  (require 'recentf)
  (add-to-list 'recentf-exclude no-littering-var-directory)
  (add-to-list 'recentf-exclude no-littering-etc-directory)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
  
  ;; Emacs will save customizations into your init.el file by default. If you don't
  ;; want that, you might want to store them in a sibling file or even in the etc/
  ;; directory:
  
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
  )
#+end_src

* General Configuration
** MacOS Key Binding GUI
#+begin_src emacs-lisp
(setq mac-option-modifier 'meta)
#+end_src

** Kill ring lines
#+begin_src emacs-lisp
(setq  global-mark-ring-max 1000 
       mark-ring-max 1000 
       mode-require-final-newline t ;;add a newline to end of file
       )
(setq kill-ring-max 1000 )
#+end_src

** New line indent
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

* ESL Spell check
Need to install spell checker and dictionary aspell & aspell-dict-en
#+begin_src emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

* Basic UI Configuration
** Bar Mode
#+begin_src emacs-lisp
(if (display-graphic-p)
    (progn
      (scroll-bar-mode -1)        ; Disable visible scrollbar
      (tool-bar-mode -1)          ; Disable the toolbar
      (tooltip-mode -1)           ; Disable tooltips
      ;;(set-fringe-mode 10)        ; Give some breathing room
      (menu-bar-mode -1)            ; Disable the menu bar
      ))

;; Set up the visible bell
(setq visible-bell t)
(display-time-mode 1)
(column-number-mode)
(global-display-line-numbers-mode t)
#+end_src

** Color theme
#+begin_src emacs-lisp
;; Colorize color names in buffers
(use-package rainbow-mode
  :config
  (progn
    (defun @-enable-rainbow ()
      (rainbow-mode t))
    (add-hook 'prog-mode-hook '@-enable-rainbow)
    ))

(use-package rainbow-delimiters
  :config
  (progn
    (defun @-enable-rainbow-delimiters ()
      (rainbow-delimiters-mode t))
    (add-hook 'prog-mode-hook '@-enable-rainbow-delimiters)))

(use-package color-theme-sanityinc-tomorrow
  :ensure t)

(require 'color-theme-sanityinc-tomorrow)

(setq custom-safe-themes t)
(color-theme-sanityinc-tomorrow-eighties)
#+end_src

** Better Mode Line
#+begin_src emacs-lisp
;; doom-modeline depend the all-the-icons package 
(use-package all-the-icons)
(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))
#+end_src

** Tree Sitter
#+begin_src emacs-lisp
;; will be build-in in emacs29
(use-package tree-sitter
  :ensure t
  )
(use-package tree-sitter-langs
  :ensure t
  )
(use-package tree-sitter-indent
  :ensure t
  )
(require 'tree-sitter)
(require 'tree-sitter-hl)
(require 'tree-sitter-langs)
(global-tree-sitter-mode)
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
#+end_src

** Which Key
[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key
binding in Emacs to offer you all possible completions for the prefix.  For
example, if you press =C-c= (hold control and press the letter =c=), a panel
will appear at the bottom of the frame displaying all of the bindings under that
prefix and which command they run.  This is very useful for learning the
possible key bindings in the mode of your current buffer.
#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+end_src

** Show Brackets
#+begin_src emacs-lisp
(use-package paren
  :config
  (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
  (show-paren-mode 1))
#+end_src

** Ivy and Counsel
[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet
powerful selection menu that appears when you open files, switch buffers, and
for many other tasks in Emacs.  Counsel is a customized set of commands to
replace `find-file` with `counsel-find-file`, etc which provide useful commands
for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more
information about each item. 

#+begin_src emacs-lisp
(use-package ivy
  :bind (
         ("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  
  (setq ivy-initial-inputs-alist nil)

  ;; Use different regex strategies per completion command
  (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
  (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)
  
  ;; Set minibuffer height for different commands
  (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  (setf (alist-get 'swiper ivy-height-alist) 15)
  (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)
  
  (ivy-mode 1))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :ensure t
  :init (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-switch-buffer)
         ("C-M-j" . 'counsel-switch-buffer)
         ("C-x C-b" . counsel-ibuffer)
         ("M-y" . counsel-yank-pop)
         ("C-x C-r" . counsel-recentf)
         ("C-x C-f" . counsel-find-file)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))
#+end_src

** Improved Candidate Sorting
prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them. This can be
especially helpful when using =M-x= to run commands that you don't have bound to
a key but still need to access occasionally.
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
                                        ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))

(use-package smex ;; Adds M-x recent command sorting for counsel-M-x
  :after counsel)
#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-=
command buffers.  For example, if you use =describe-function=, you will not only
get the documentation about the function, you will also see the source code of
the function and where it gets used in other places in the Emacs configuration.
It is very useful for figuring out how things work in Emacs.
#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :config
  ;; Note that the built-in `describe-function' includes both functions
  ;; and macros. `helpful-function' is functions only, so we provide
  ;; `helpful-callable' as a drop-in replacement.
  (global-set-key (kbd "C-h f") #'helpful-callable)

  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h x") #'helpful-command)
  ;; Lookup the current symbol at point. C-c C-d is a common keybinding
  ;; for this in lisp modes.
  (global-set-key (kbd "C-c C-d") #'helpful-at-point)
  
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  (global-set-key (kbd "C-h F") #'helpful-function)
  
  (setq counsel-describe-function-function #'helpful-callable)
  (setq counsel-describe-variable-function #'helpful-variable)
  )
#+end_src

* Programming Configuration
** Commenting
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :ensure t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** LSP Configuration
Try to use lsp-bridge as the lsp client. Using Python multithreading techniques,
lsp-bridge builds a high-speed cache between Emacs and the LSP server, ensuring
that Emacs never gets stuck while providing a smooth and seamless code
completion experience.
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t)
;; :config
;; (yas-global-mode 1))

;; install depending package
(use-package posframe
  :ensure t)
(use-package markdown-mode
  :ensure t)
;; popup completion
(unless (display-graphic-p)
  (add-to-list 'load-path "~/.emacs.d/custom-package/emacs-popon")
  (add-to-list 'load-path "~/.emacs.d/custom-package/acm-terminal")
  (with-eval-after-load 'acm
    (require 'acm-terminal)))

(add-to-list 'load-path "~/.emacs.d/custom-package/lsp-bridge")
(require 'lsp-bridge)
(setq lsp-bridge-enable-org-babel t)
(define-key global-map [remap xref-find-definitions] 'lsp-bridge-find-def)
(define-key global-map [remap xref-pop-marker-stack] 'lsp-bridge-find-def-return)
(global-lsp-bridge-mode)
#+end_src
A special kind of key binding can be used to remap one command to another,
without having to refer to the key sequence(s) bound to the original command. To
use this feature, make a key binding for a key sequence that starts with the
dummy event remap, followed by the command name you want to remap; for the
binding, specify the new definition (usually a command name, but possibly any
other valid definition for a key binding). 

** Citre
Citre is an advanced Ctags (or actually, readtags) frontend for Emacs. It
offers: 
1. completion-at-point, xref and imenu integration.
2. citre-jump: A completing-read UI for jumping to definition.
3. citre-peek: A powerful code reading tool that lets you go down the rabbit
   hole without leaving current
#+begin_src emacs-lisp
(use-package citre
  :ensure t)
(require 'citre)
(require 'citre-config)
(if (eq system-type 'darwin)
    (progn
      (setq citre-ctags-program "uctags")
      (setq citre-readtags-program "ureadtags")))

#+end_src
   
** Languages Setting
*** Python
#+begin_src emacs-lisp
(use-package py-yapf
  :ensure t
  :config
  (add-hook 'python-mode-hook 'py-yapf-enable-on-save))

(setq python-shell-interpreter "python"
      ;; python-shell-interpreter-args "-i --simple-prompt")
      python-shell-interpreter-args "-i")
#+end_src
Now set the python virtual environment is quite simple
#+begin_quote
1. python3 -m venv tutorial-env
2. put the setting env in sh file
#+end_quote

*** Common Lisp
1. Install SBCL
#+begin_quote
$pacman -S sbcl
$curl -O http://beta.quicklisp.org/quicklisp.lisp
$sbcl --load quicklisp.lisp
#+end_quote
2. Config SBCL Mode
#+begin_src emacs-lisp
;; (load (expand-file-name "~/quicklisp/slime-helper.el"))
;; Replace "sbcl" with the path to your implementation
;; (setq inferior-lisp-program "/usr/sbin/sbcl")
(use-package sly
  :config
  (setq inferior-lisp-program "/usr/bin/sbcl"
        sly-complete-symbol-function 'sly-simple-completions))
#+end_src

*** Scala
1. Install Scala lsp server
#+begin_quote
curl -L -o coursier https://git.io/coursier-cli

chmod +x coursier

./coursier bootstrap \
–java-opt -Xss4m \
–java-opt -Xms100m \
–java-opt -Dmetals.client=emacs \
org.scalameta:metals_2.12:0.11.2 \
-r bintray:scalacenter/releases \
-r sonatype:snapshots \
-o home/bochao.local/bin/metals-emacs -f
#+end_quote

2. Config scala mode
#+begin_src emacs-lisp
(use-package scala-mode
  :interpreter
  ("scala" . scala-mode))

;; Enable sbt mode for executing sbt commands
(use-package sbt-mode
  :commands sbt-start sbt-command
  :config
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map)
  ;; sbt-supershell kills sbt-mode:  https://github.com/hvesalai/emacs-sbt-mode/issues/152
  (setq sbt:program-options '("-Dsbt.supershell=false"))
  )
#+end_src

*** Verilog HDL
#+begin_src emacs-lisp
(add-hook 'verilog-mode-hook
          '(lambda ()
             (company-mode)
             (define-key verilog-mode-map "\M-["
               'citre-peek)
             (define-key verilog-mode-map "\M-."
               'citre-jump)
             (define-key verilog-mode-map "\M-,"
               'citre-jump-back)))
#+end_src

*** CMake
1. Install cmake-language-server first
#+begin_quote
pip install cmake-language-server
#+end_quote
2. CMake Mode Config
#+begin_src emacs-lisp
(use-package cmake-mode
  :config
  (setq auto-mode-alist  
        (append '(("CMakeLists\\.txt\\'" . cmake-mode)  
                  ("\\.cmake\\'" . cmake-mode))  
                auto-mode-alist))
  )
#+end_src

*** TAGS
#+begin_src emacs-lisp
;; (use-package xcscope
  ;; :ensure t)
;; (add-hook 'c-mode-hook '(lambda ()
                          ;; (cscope-minor-mode t)))
#+end_src

* Org Mode
** Basic Config
This package provides visual alignment for Org Mode, Markdown and table.el
tables on GUI Emacs. It can properly align tables containing variable-pitch
font, CJK characters and images. Meanwhile, the text-based alignment generated
by Org mode (or Markdown mode) is left untouched.
#+begin_src emacs-lisp
;; use this variable to disable acutal size
;; otherwise the #+ATTR_ORG or #+ATTR_HTML :width 300px will not work
(setq org-image-actual-width nil)

(setq org-agenda-start-with-log-mode t)
(setq org-log-done 'time)
(setq org-log-into-drawer t)

(use-package valign
  :ensure t
  :config
  (add-hook 'org-mode-hook #'valign-mode)
  (add-hook 'org-mode-hook
            (lambda()
              (setq truncate-lines nil))))
#+end_src

** Babel Languages
#+begin_src emacs-lisp
(setq org-src-preserve-indentation t)
(with-eval-after-load 'org
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (js . t)
     (makefile . t)
     (python . t)))
  (push '("conf-unix" . conf-unix) org-src-lang-modes))

(require 'org-tempo)

;; code blocks syntax hightlight
(use-package htmlize
  :ensure t)
#+end_src

** Format Org Babel Code Block
#+begin_src emacs-lisp
(defun indent-org-block-automatically ()
  (when (org-in-src-block-p)
    (org-edit-special)
    (indent-region (point-min) (point-max))
    (org-edit-src-exit)))
(setq org-src-tab-acts-natively t)
(add-hook 'org-babel-pre-tangle-hook 'indent-org-block-automatically)
;; (run-at-time 1 10 'indent-org-block-automatically)
(add-hook 'org-mode-hook (lambda () (setq fill-column 80)))
(add-hook 'org-mode-hook 'turn-on-auto-fill)
#+end_Src
** HTML Export
The Org mode export to HTML setting.
1. By adding extra tag to each org file
#+begin_quote
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+end_quote

2. make the html more readable.
#+begin_src emacs-lisp
(setq org-html-htmlize-output-type 'css)
#+end_src
and more important thing is M-x run commands
#+begin_quote
M-x org-html-htmlize-generate-css
#+end_quote
#+begin_quote
Note: remember to (setq org-html-head-include-default-style nil) to avoid any
unexpected styles from the default styles, see Issue #14. 
#+end_quote
** Org Download
A screenshot taken using gnome-screenshot, scrot, gm, xclip (on Linux),
screencapture (on OS X) or, imagemagick/convert (on Windows). Use the
org-download-screenshot command for this. Customize the backend with
org-download-screenshot-method.
#+begin_src emacs-lisp
(use-package org-download
  :custom
  (org-download-method 'directory)
  (org-download-image-dir "./images")
  (org-download-timestamp "%Y%m%d-%H%M%S_")
  :bind
  ("C-M-y" . org-download-screenshot)
  )

(defun make-images-path (path-name)
  "create a direcotry if it is not existed"
  (unless (file-directory-p path-name)
    (make-directory path-name))
  path-name)

(defun org-download-wsl-clipboard()
  "use powershell to catch the clipboard, 
  to simplify the logic, use c:/Users/Public as temporary directoy, and move it into current directoy"
  (interactive)
  (let* ((powershell "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe")
         (file-name (format-time-string "%Y%m%d-%H%M%S_screenshot.png"))
         ;; (file-path-powershell (concat "c:/Users/\$env:USERNAME/" file-name))
         ;; (file-path-wsl (concat "./images/" file-name))
         (file-path-wsl (concat (make-images-path "./images/") file-name))
         )
    ;; (shell-command (concat powershell " -command \"(Get-Clipboard -Format Image).Save(\\\"C:/Users/\\$env:USERNAME/" file-name "\\\")\""))
    (shell-command (concat powershell " -command \"(Get-Clipboard -Format Image).Save(\\\"C:/Users/Public/" file-name "\\\")\""))
    (rename-file (concat "/mnt/c/Users/Public/" file-name) file-path-wsl)
    (insert (concat "[[file:" file-path-wsl "]]"))
    (message "insert DONE.")))

;; Drag-and-drop to `dired`
(require 'org-download)
(add-hook 'dired-mode-hook 'org-download-enable)

#+end_src

** Org Roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :custom
  (org-roam-directory (file-truename "~/OrgNotes/"))
  (org-roam-completion-everywhere t)
  (org-roam-capture-templates
   '(("d" "default & gtd" plain
      "%?"
      :if-new (file+head "gtd/${slug}-%<%Y%m%d%H%M%S>.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "programming languages" plain
      "%?"
      :if-new (file+head "languages/${slug}-%<%Y%m%d%H%M%S>.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("f" "embedded firmware things" plain
      "%?"
      :if-new (file+head "firmware/${slug}-%<%Y%m%d%H%M%S>.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("e" "electronics knowledge" plain
      "%?"
      :if-new (file+head "electronics/${slug}-%<%Y%m%d%H%M%S>.org" "#+title: ${title}\n")
      :unnarrowed t)
     ))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))
#+end_src

* Ends
** Profiling
#+begin_src emacs-lisp
  (use-package esup
    :ensure t
    :config
    (setq esup-depth 0))
#+end_src

** GUI Font&Window Size Configuration
#+begin_src emacs-lisp
(defun custom/get-font-size ()
  "Get font size depending on X Windows pixel height"
  (cond
   ((and (> (x-display-pixel-height) 1440) (eq window-system 'w32)) 125)
   ((> (x-display-pixel-height) 1440) 175)
   ((> (x-display-pixel-height) 1080) 120)
   (t 100)))

(if (display-graphic-p)
    (progn
      (defvar custom/default-font-size (custom/get-font-size))
      (defvar custom/default-variable-font-size (custom/get-font-size))
      (set-face-attribute 'default nil :font "JetBrains Mono" :height custom/default-font-size)
      ;; Set the fixed pitch face
      (set-face-attribute 'fixed-pitch nil :font "JetBrains Mono" :height custom/default-font-size)
      
      ;; Set the variable pitch face
      ;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height custom/default-variable-font-size :weight 'regular)))
      ;; set the variable pitch face
      (set-face-attribute 'variable-pitch nil :font "Source Sans Pro" :height custom/default-variable-font-size :weight 'regular)
      ))

(if (display-graphic-p)
    (cond ((> (x-display-pixel-height) 1080)
           (setq default-frame-alist
                 '((top . 10)(left . 10)(width . 100)(height . 60))))
          (t
           (setq default-frame-alist
                 '((top . 10)(left . 10)(width . 80)(height . 40))))
          ))
#+end_src

** Misc
#+begin_src emacs-lisp
;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                treemacs-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

(provide 'init)
  ;;; init.el ends here
#+end_src
