#+title: Emacs From Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

Learn emacs configuration and itself(emacs-lisp) from System
Crafters [[https://github.com/daviwil/emacs-from-scratch][Emacs-From-Scratch]], copy and remember, happy hacking.

* Startup Performance
** Font Size Config
#+begin_src emacs-lisp
  ;;; init.el --- Generated by Emacs.org
  ;;; Commentary:
  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!
  ;; You will most likely need to adjust this font size for your system!

  ;;; Code:
  (defalias 'yes-or-no-p 'y-or-n-p)

  (defvar efs/default-font-size 180)
  (defvar efs/default-variable-font-size 180)
#+end_src

** Background transparency Config
#+begin_src emacs-lisp
  ;; Make frame transparency overridable
  (defvar efs/frame-transparency '(90 . 90))

#+end_src

** Measure Loading Time Performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_Src

* Working with Coding Systems and Unicode
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  ;; backwards compatibility as default-buffer-file-coding-system
  ;; is deprecated in 23.2.
  (if (boundp 'buffer-file-coding-system)
      (setq-default buffer-file-coding-system 'utf-8)
    (setq default-buffer-file-coding-system 'utf-8))

  ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+end_src

* Package System Setup
Emacs has a built in package manager but it doesn’t make it easy to
automatically install packages on a new system the first time you pull
down your configuration. use-package is a really helpful package used
in this configuration to make it a lot easier to automate the
installation and configuration of everything else we use.

#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (cond
   ((eq system-type 'darwin)
    (progn
      (setq package-archives '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
                               ("org" . "https://orgmode.org/elpa.")
                               ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")))
      (message "darwin ok")))
   (t
    (progn
      (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                               ("org" . "https://orgmode.org/elpa/")
                               ("elpa" . "https://elpa.gnu.org/packages/")))
      (message "non darwin ok"))))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

The auto-package-update package helps us keep our Emacs packages up to
date! It will prompt you after a certain number of days either at
startup or at a specific time of day to remind you to update your
packages.

You can also use M-x auto-package-update-now to update right now!

#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 30)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

Read PATH from shell
#+begin_src emacs-lisp
  ;; (when (memq window-system '(mac ns x))
  ;;  (exec-path-from-shell-initialize))
  (use-package exec-path-from-shell
    :ensure t
    :config
    (cond
     ((eq system-type 'darwin)
      (progn
        (exec-path-from-shell-initialize)))
     (t
      (progn
        (message "nothing happened."))))
    )
#+end_src


* Keep Folders Clean
We use the no-littering package to keep folders where we edit files
and the Emacs configuration folder clean! It knows about a wide
variety of variables for built in Emacs features as well as those from
community packages so it can be much easier than finding and setting
these variables yourself.

#+begin_src emacs-lisp
  ;; NOTE: If you want to move everything out of the ~/.emacs.d folder
  ;; reliably, set `user-emacs-directory` before loading no-littering!
  (setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src


* General Config
Auto Wrap lines
#+begin_src emacs-lisp
  (global-visual-line-mode 1)  
#+end_src

Kill ring lines
#+begin_src emacs-lisp
  (setq  global-mark-ring-max 5000 ;;increase mark ring to contains 5000 entries
         mark-ring-max 5000 ;;increase kill ring to contains 5000 entries
         mode-require-final-newline t ;;add a newline to end of file
         )

  (setq kill-ring-max 5000 ;;increase kill-ring capacity
        )
#+end_src

Fontset System
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

Define words jump mode when brows docs
#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :bind ("C-." . ace-jump-mode))

#+end_src


* Basic UI Configuration
** Bar Mode and Transparency
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)            ; Disable the menu bar

  ;; Set up the visible bell
  (setq visible-bell t)
  (display-time-mode 1)
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha efs/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,efs/frame-transparency))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

Use Fira code and Cantarell
#+begin_src emacs-lisp
  (use-package unicode-fonts)
  (require 'unicode-fonts)
  (unicode-fonts-setup)
  (set-face-attribute 'default nil :font "Fira Code" :height efs/default-font-size)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height efs/default-font-size)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

#+end_src

** Color theme
[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))

#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))

#+end_src

** Show parens
#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))

#+end_src
** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

[[https://github.com/Yevgnen/ivy-rich][ivy-rich]] adds extra columns to a few of the Counsel commands to provide more information about each item.

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (
           ("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    (setq ivy-initial-inputs-alist nil)

    ;; Use different regex strategies per completion command
    (push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist)
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
    (setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
    (setf (alist-get 'swiper ivy-height-alist) 15)
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-b" . counsel-ibuffer)
           ("M-y" . counsel-yank-pop)
           ("C-x C-r" . counsel-recentf)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+end_src

** Improved Candidate Sorting
prescient.el provides some helpful behavior for sorting Ivy completion
candidates based on how recently or frequently you select them.  This
can be especially helpful when using =M-x= to run commands that you
don't have bound to a key but still need to access occasionally.

#+begin_src emacs-lisp

  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
                                          ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

  (use-package smex ;; Adds M-x recent command sorting for counsel-M-x
    :defer 1
    :after counsel)
#+end_src

** Helpful Help Commands
[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs'
=describe-= command buffers.  For example, if you use
=describe-function=, you will not only get the documentation about the
function, you will also see the source code of the function and where
it gets used in other places in the Emacs configuration.  It is very
useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src


* Programming Config
** Company Mode
[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 2)
    (company-idle-delay 0.0)
    :config
    (global-company-mode 1))
#+end_src

** File Explorer sidebar
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind
    (("C-c t" . treemacs)))
#+end_src

#+begin_src emacs-lisp
  (use-package neotree
    :custom
    (neo-theme 'nerd2)
    :config
    (progn
      (setq neo-smart-open t)
      (setq neo-theme (if (display-graphic-p) 'icons 'nerd))
      (setq neo-window-fixed-size nil)
      ;; (setq-default neo-show-hidden-files nil)
      (global-set-key [f3] 'neotree-toggle)
      (global-set-key [f8] 'neotree-dir)))

#+end_src

** Code template
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)
  (yas-global-mode 1)
#+end_src

** Code Management
#+begin_src emacs-lisp

  (use-package magit
    :ensure t)
#+end_src

** LSP-Client
#+begin_src emacs-lisp
  (use-package eglot :ensure t)
  (require 'eglot)
  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
#+end_src

** C/C++ Setting
#+begin_src emacs-lisp
  ;; TODO special for C/C++
  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
#+end_src

** Rust
#+begin_src emacs-lisp
  ;; (use-package rust-mode
  ;;   :ensure t
  ;;   :config
  ;;   (setq rust-format-on-save t)
  ;;   (setq eglot-rust-server 'rls)
  ;;   (add-hook 'rust-mode-hook
  ;;             (lambda () (setq indent-tabs-mode nil)))
  ;;   (add-hook 'rust-mode-hook 'eglot-ensure)
  ;;   (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
  ;;   )
  (use-package rustic
    :ensure t
    :config
    (setq rustic-lsp-client 'eglot)

    (setq rustic-lsp-server 'rustic-analyzer)
    (setq rustic-format-triggger 'on-save)
    (setq rustic-format-on-save t))
#+end_src


** Python Setting
*** How to setting Env
+ install virtualenv by pip
  #+begin_src shell
    pip3 install virtualenv

    pip3 install virtualenvwrapper

  #+end_src

+ virtualevn set, put setting in .zshrc file
  #+begin_src shell
    #Virtualenvwrapper settings:
    export WORKON_HOME=$HOME/.virtualenvs
    export VIRTUALENVWRAPPER_PYTHON=$HOME/.virtualenvs/py39/bin/python3
    export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.virtualenvs/py39/bin/virtualenv
    source $HOME/.virtualenvs/py39/bin/virtualenvwrapper.sh
    # export VIRTUALENVWRAPPER_VIRTUALENV=~/.local/bin/virtualenv
    # source ~/.local/bin/virtualenvwrapper.sh
  #+end_src

  #+begin_src shell
    #Run:
    $workon
    #A list of environments, empty, is printed.

    #Run:
    mkvirtualenv temp
    #A new environment, temp is created and activated.

    #Run:
    workon
    #This time, the temp environment is included.
  #+end_src

*** Another way to set Env
+ miniconda
  Miniconda is a free minimal installer for conda. It is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on, and a small number of other useful packages, including pip, zlib and a few others. Use the conda install command to install 720+ additional conda packages from the Anaconda repository.
  [[https://docs.conda.io/en/latest/miniconda.html][MiniConda]]
  These Miniconda installers contain the conda package manager and Python. Once Miniconda is installed, you can use the conda command to install any other packages and create environments, etc. For example:
  #+begin_src shell
    $ conda install numpy
    ...
    $ conda create -n py3k anaconda python=3
    ...
  #+end_src
  

*** How to set LSP
+ install pyls or jedi
  #+begin_src shell
    pip3 install 'python-language-server[all]'
  #+end_src

   #+begin_src emacs-lisp
     ;; ;;; Python-config:
     (use-package elpy
       :ensure t
       :init
       (elpy-enable)
       :config
       (setq elpy-rpc-backend "pyls"))

     ;; (setq python-shell-interpreter "python3")
     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args "--simple-prompt -i")
     ;; This part is needed, for cross platforms, both virtualenv use the
     ;; same name
     (pyvenv-activate (expand-file-name "~/.virtualenvs/py39"))
     ;; enable
     (add-hook 'python-mode-hook 'eglot-ensure)
     (setq python-indent-guess-indent-offset-verbose nil)

     ;; ;; M-x elpy-config can get the elpy environment config.
     ;; ;; jedi or flake8 not installed, because elpy-rpc not installed
     ;; ;; we can source elpy-virtual-env active to enter the path
     ;; ;; an install the needed pacakge.
     ;; (setq elpy-rpc-virtualenv-path 'current)

     ;; format code on save
     ;; (use-package 'py-autopep8
     ;; :enable t)
     ;; (require 'py-autopep8)
     ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)
     (use-package python-black
       :demand t
       :after python
       :config
       (add-hook 'python-mode-hook 'python-black-on-save-mode))
   #+end_src

   #+RESULTS:

** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))

     (defvar-local flycheck-eglot-current-errors nil)

     (defun flycheck-eglot-report-fn (diags &rest _)
       (setq flycheck-eglot-current-errors
             (mapcar (lambda (diag)
                       (save-excursion
                         (goto-char (flymake--diag-beg diag))
                         (flycheck-error-new-at (line-number-at-pos)
                                                (1+ (- (point) (line-beginning-position)))
                                                (pcase (flymake--diag-type diag)
                                                  ('eglot-error 'error)
                                                  ('eglot-warning 'warning)
                                                  ('eglot-note 'info)
                                                  (_ (error "Unknown diag type, %S" diag)))
                                                (flymake--diag-text diag)
                                                :checker 'eglot)))
                     diags))
       (flycheck-buffer))

     (defun flycheck-eglot--start (checker callback)
       (funcall callback 'finished flycheck-eglot-current-errors))

     (defun flycheck-eglot--available-p ()
       (bound-and-true-p eglot--managed-mode))

     (flycheck-define-generic-checker 'eglot
       "Report `eglot' diagnostics using `flycheck'."
       :start #'flycheck-eglot--start
       :predicate #'flycheck-eglot--available-p
       :modes '(prog-mode text-mode))

     (push 'eglot flycheck-checkers)

     (defun sanityinc/eglot-prefer-flycheck ()
       (when eglot--managed-mode
         (flycheck-add-mode 'eglot major-mode)
         (flycheck-select-checker 'eglot)
         (flycheck-mode)
         (flymake-mode -1)
         (setq eglot--current-flymake-report-fn 'flycheck-eglot-report-fn)))

     (add-hook 'eglot--managed-mode-hook 'sanityinc/eglot-prefer-flycheck)

     (use-package flycheck-rust
       :ensure t)
     (push 'rustic-clippy flycheck-checkers)
     (setq rustic-flycheck-clippy-params "--message-format=json")
     (with-eval-after-load 'rustic-mode
       (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
     ;; change to rustic-mode or rust-mode, based on previous selection
     ;; otherwise it will crash.
   #+end_src

** CMake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t
    :config
    (setq auto-mode-alist  
          (append '(("CMakeLists\\.txt\\'" . cmake-mode)  
                    ("\\.cmake\\'" . cmake-mode))  
                  auto-mode-alist)))
#+end_src

** Magit
[[https://magit.vc/][Magit]] is the best Git interface I've ever used.  Common Git operations are easy to execute quickly using Magit's command panel system.

#+begin_src emacs-lisp

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  ;; NOTE: Make sure to configure a GitHub token before using this package!
  ;; - https://magit.vc/manual/forge/Token-Creation.html#Token-Creation
  ;; - https://magit.vc/manual/ghub/Getting-Started.html#Getting-Started
  (use-package forge
    :after magit)
 ;; Note: How to add private to ~/.ssh/config files
 ;; Host github.com-rt4bc
 ;; HostName github.com
 ;; User rt4bc
 ;; IdentityFile ~/.ssh/id_rsa_github_rt

 ;; Note update ssh keybindings
 ;; ssh-add -D ; remove all cache
 ;; ssh-add xxxx_private_key  ;;update host private key.
#+end_src

** Commenting
Emacs' built in commenting functionality =comment-dwim= (usually bound to =M-;=) doesn't always comment things in the way you might expect so we use [[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] to provide a more familiar behavior.  I've bound it to =M-/= since other editors sometimes use this binding but you could also replace Emacs' =M-;= binding with this command.

#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))
#+end_src

** Rainbow Delimiters
[[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] is useful in programming modes because it colorizes nested parentheses and brackets according to their nesting depth.  This makes it a lot easier to visually match parentheses in Emacs Lisp code without having to count them yourself.

#+begin_src emacs-lisp

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

* Org Mode
[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich
document editor, project planner, task and time tracker, blogging
engine, and literate coding utility all wrapped up in one package.

** Beter Font
The =efs/org-font-setup= function configures various text faces to
tweak the sizes of headings and use variable width fonts in most cases
so that it looks more like we're editing a document in =org-mode=.  We
switch back to fixed width (monospace) fonts for code blocks and
tables so that they display correctly.
#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
    ;; (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inheit '(fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
    (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
    (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

#+end_src

** Org Basic Config
Auto truncate line at Org Mode
#+begin_src emacs-lisp
  (use-package valign
    :ensure t)
  (add-hook 'org-mode-hook #'valign-mode)
  (add-hook 'org-mode-hook
            (lambda()
              (setq truncate-lines nil))) 
#+end_src

This section contains the basic configuration for =org-mode= plus the
configuration for Org agendas and capture templates.
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org
  :pin org
  :commands (org-capture org-agenda)
  :hook (org-mode . efs/org-mode-setup)
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (cond
  ((string-equal system-name "BLIU3-T01")
  (progn
  (setq org-agenda-files
      '("/mnt/c/Users/bliu3/Workspace/Org/Tasks.org"
        "/mnt/c/Users/bliu3/Workspace/Org/Notes.org"))))
  (t 
  (progn
  (setq org-agenda-files
      '("~/Desktop/Org/Tasks.org"
        "~/Desktop/Org/Notes.org")))))

        (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

  (setq org-todo-keywords
  '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

)
#+end_src

** Nice Heading Bullets
#+begin_src emacs-lisp

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Center Org Buffer
We use [[https://github.com/joostkremers/visual-fill-column][visual-fill-column]] to center =org-mode= buffers for a more
pleasing writing experience as it centers the contents of the buffer
horizontally to seem more like you are editing a document.  This is
really a matter of personal preference so you can remove the block
below if you don't like the behavior.


#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Config Babel Languages
Eval code blocks.
#+begin_src emacs-lisp

  (with-eval-after-load 'org
    (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
	(C . t)
        (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))

#+end_src

Code blocks syntax hightlight
#+begin_src  emacs-lisp
(use-package htmlize
:ensure t)
#+end_src

** Structurngle Templates
Org Mode's [[https://orgmode.org/manual/Structure-Templates.html][structure templates]] feature enables you to quickly insert code blocks into your Org files in combination with =org-tempo= by typing =<= followed by the template name like =el= or =py= and then press =TAB=.  For example, to insert an empty =emacs-lisp= block below, you can type =<el= and press =TAB= to expand into such a block.

You can add more =src= block templates below by copying one of the lines and changing the two strings at the end, the first to be the template name and the second to contain the name of the language [[https://orgmode.org/worg/org-contrib/babel/languages.html][as it is known by Org Babel]].

#+begin_src emacs-lisp
  (cond
   ((string-match org-version "9.2")
    (progn
      (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
  
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    ))))

#+end_src

** Auto-tangle Configuration Files
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

** Format Code Block
#+begin_src emacs-lisp
  (defun indent-org-block-automatically ()
    (when (org-in-src-block-p)
      (org-edit-special)
      (indent-region (point-min) (point-max))
      (org-edit-src-exit)))
  (setq org-src-tab-acts-natively t)
  (add-hook 'org-babel-pre-tangle-hook 'indent-org-block-automatically)
  ;; (run-at-time 1 10 'indent-org-block-automatically)
#+end_src


* Ends
#+begin_src emacs-lisp
(provide 'init)
;;; init.el ends here
#+end_src
